@using System.Text
@using Utility.Common;
@using System.Globalization

@inject IJSRuntime JSRuntime

<div class="container">
    <div class="row">
        <div class="col">
            <h2>String Converter</h2>
        </div>
    </div>
    
    <div class="row">
        <div class="col">
            <h4>Selected - @choice.Name</h4>
            <EditForm Model="choice">
                <InputRadioGroup @bind-Value="choice.Name">
                    @foreach (var option in Options)
                    {
                        <InputRadio Value="option" /> @option <br />
                    }
                </InputRadioGroup>
            </EditForm>
        </div>
    </div>
    
    <div class="row">
        <div class="col">
            <div class="input-group">
                <textarea id="stringconverter" class="form-control" rows="5">@Input</textarea>
                <span class="input-group-btn">
                    <button id="btnStringConverter" name="btnStringConverter" class="btn btn-success float-right" @onclick="Convert">Convert</button>
                    <button id="btnClearStringConverter" name="btnClearStringConverter" class="btn btn-danger float-right" @onclick="Clear"><i class="far fa-trash-alt"></i>@*Clear*@</button>
                </span>
            </div>
            
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="input-group">
                <textarea id="outputStringConverter" class="form-control" rows="5" @bind="Output"></textarea>
                <span class="input-group-btn">
                    <button id="btnCopyStringConverter" name="btnCopyStringConverter" class="btn btn-info float-right" @onclick="Copy"><i class="far fa-copy"></i></button>
                </span>
            </div>
        </div>
    </div>
    
</div>

@code {
    string Input = "the quick brown fox jumps over the lazy dog"; //string.Empty;
    string Output = string.Empty;

    Choice choice = new Choice()
    {
        Name = "Sentence case"
    };
    List<string> Options = new List<string> { "Sentence case", "lower case", "UPPER CASE", "Capitalized Case", "aLtErNaTiNg cAsE", "Title Case", "InVeRsE CaSe", "Remove Whitespace" };
    
    private void Convert()
    {
        TextInfo ti = CultureInfo.CurrentCulture.TextInfo;
        
        switch (choice.Name)
        {
            case "Sentence case":
                Output = Input.FirstCharToUpper();
                break;
            case "lower case":
                Output = Input.ToLower();
                break;
            case "UPPER CASE":
                Output = Input.ToUpper();
                break;
            case "Capitalized Case":
                Output = ti.ToTitleCase(Input);
                break;
            case "aLtErNaTiNg cAsE":
                break;
            case "Title Case":
                Output = ti.ToTitleCase(Input);
                break;
            case "InVeRsE CaSe":
                Output = Input.Invert();
                break;
            case "Remove Whitespace":
                Output = String.Concat(Input.Where(c => !Char.IsWhiteSpace(c)));
                break;
        }
    }
    
    private void Clear()
    {
        Input = string.Empty;
    }

    async Task Copy()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Output);
    }
    
    public class Choice
    {
        public string Name { get; set; }
    }
    
}