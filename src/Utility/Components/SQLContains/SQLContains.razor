@inject IJSRuntime JSRuntime

<div style="display: flex; width=100%">
    <FluentTextField @bind-Value=Field>
        <FluentLabel Typo="Typography.Body" Slot="start">Field:</FluentLabel>
        <FluentButton OnClick="CopyField" Title="Copy" IconStart="@(new Icons.Regular.Size16.Copy())" Slot="end" />
        <FluentButton OnClick="ClearField" Title="Clear" IconStart="@(new Icons.Regular.Size16.Delete())" Slot="end" />
    </FluentTextField>
</div>

<div style="display: flex; width=100%">
    <FluentTextArea @bind-Value=Input AriaLabel="Without label">
        <FluentButton OnClick="Clear" Title="Clear" IconStart="@(new Icons.Regular.Size16.Delete())" Slot="end" />
    </FluentTextArea>
</div>

<div style="display: flex; width=100%">
    <FluentStack>
        <FluentCheckbox @bind-Value="@IncludeWildcard" Label="Include Wildcard" />
    </FluentStack>
</div>

<div style="display: flex; width=100%">
    <FluentButton OnClick="Create" Title="Create">Create</FluentButton>
</div>

<div style="display: flex; width=100%">
    <FluentTextArea @bind-Value=Output AriaLabel="Without label">
        <FluentButton OnClick="Copy" Title="Copy" IconStart="@(new Icons.Regular.Size16.Copy())" Slot="end" />
    </FluentTextArea>
</div>

@code {

    [Parameter]
    public string? Field { get; set; }
    
    [Parameter]
    public string? Input { get; set; }
    
    [Parameter]
    public string? Output { get; set; }

    [Parameter]
    public bool IncludeWildcard { get; set; }
    
    string wildcard = "*";
    
    protected override void OnInitialized()
    {
        // Field = string.Empty;
        // Input = string.Empty;
        // Output = string.Empty;
        IncludeWildcard = false;
    }

    async Task CopyField()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Field);
    }

    private void ClearField()
    {
        Field = string.Empty;
    }

    private void Clear()
    {
        Input = string.Empty;
    }

    private void Create()
    {
        // CONTAINS(Description, @SearchWord)
        // WHERE CONTAINS(t.something, '"bla*" OR "foo*" OR "batz*"')

        wildcard = IncludeWildcard ? "*" : "";
        var items = Input.Split(new[] { System.Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);
        var likeItems = string.Join(" OR ", items.Select(i => $"CONTAINS ({Field}, {wildcard}{i.Trim()}{wildcard})"));

        Output = likeItems;
    }

    async Task Copy()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Output);
    }
}