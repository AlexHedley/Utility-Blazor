@implements IDisposable
@using Microsoft.IdentityModel.Tokens
@inherits LayoutComponentBase

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager

<FluentLayout>
    <FluentHeader>
        <div>
            Utility
        </div>
        <FluentSpacer />
        <div class="settings">
            <SiteSettings />
        </div>
    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu />
        <FluentBodyContent Class="body-content">
            <ErrorBoundary>
                <ChildContent>
                    <article id="article">
                        <div class="content">
                            @Body
                        </div>
                    </article>
                </ChildContent>
                <ErrorContent Context="ex">
                    <div class="blazor-error-boundary">@ex.Message</div>
                </ErrorContent>
            </ErrorBoundary>
            <FluentDialogProvider />
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter>
        <div class="link1">
            <a href="https://alexhedley.com/Utility-Documentation/" target="_blank">Documentation</a>
        </div>
        <div class="link2">
            <a href="https://alexhedley.com/Utility/" target="_blank">About</a>
        </div>
    </FluentFooter>
</FluentLayout>



@code {
    // Detecting navigation events
    // https://blazor-university.com/routing/detecting-navigation-events/
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to the event
        NavigationManager.LocationChanged += LocationChanged;
        
        var name = await localStorage.GetItemAsync<string>(Constants.LOCAL_STORAGE_TAB);
        if (!string.IsNullOrEmpty(name))
        {
            NavigationManager.NavigateTo(name); // Navigate
        }
        
        base.OnInitialized();
    }

    async void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        // string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        // System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
        
        Uri uri = new Uri(e.Location);
        string pathName = uri.AbsolutePath;
        var path = pathName.Split(new []{ "/" }, StringSplitOptions.RemoveEmptyEntries);
        if (path.Length == 0) return;
        
        await localStorage.SetItemAsync(Constants.LOCAL_STORAGE_TAB, path[^1]);
    }

    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        NavigationManager.LocationChanged -= LocationChanged;
    }
}
