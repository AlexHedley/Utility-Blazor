@page "/hcf"
@using System.IO
@using System.Text
@using System.Text.RegularExpressions

<h1>Hidden Character Finder</h1>

<p><a href="https://www.soscisurvey.de/tools/view-chars.php" target="_blank">View non-printable unicode characters</a></p>
<p><a href="https://github.com/BurninLeo/see-non-printable-characters/blob/main/view-chars.php"target="_blank">Source</a></p>

<div class="container">
    <div class="row">
        <div class="col">
            <h2>View non-printable unicode characters</h2>
            <p>Online tool to display non-printable characters that may be hidden in copy&pasted strings.</p>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <label for="s">Please paste the string here:</label>
            <textarea id="s" name="s" class="form-control" rows="8" cols="40" 
                @bind="s" style="width: 100%; box-sizing: border-box;"></textarea>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button id="btnEncode" name="btnEncode" class="btn btn-success float-right"
                    @onclick="Encode">
                Show me the characters
            </button>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="output">
                @((MarkupString)output)
            </div>
            
            <p># characters, # bytes</p>

        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="output2">
                <span class="S2Tooltip anchor">S</span>
                <span class="S2Tooltip container">
                    <span class="S2Tooltip tiptext rounded shadow">83<br>0x53</span>
                </span>
                <span class="hex S2Tooltip anchor">U+A0</span>
                <span class="S2Tooltip container">
                    <span class="S2Tooltip tiptext rounded shadow">&amp;#160;<br>\u00A0</span>
                </span>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">

            <h2>Helpful Sites for Details on UTF Characters</h2>
            <ul>
                <li><a href="https://www.branah.com/unicode-converter" target="_blank">Branah.com Unicode Converter</a></li>
                <li><a href="http://www.fileformat.info/info/unicode/char/search.htm" target="_blank">FileFormat.Info</a></li>
                <li><a href="http://utf8-chartable.de/unicode-utf8-table.pl" target="_blank">utf8-chartable.de</a></li>
            </ul>

        </div>
    </div>

</div>

@code {
    string s;
    string output;

    protected override async Task OnInitializedAsync()
    {
        @* s = "See what's hidden in your string…	or be​hind﻿"; *@
        //s = "See\u00A0what\'s hidden in your string\u2026\tor be\\u200Bhind\uFEFF";
        s = "a …	​﻿⟶b";
        output = string.Empty;
        @* var conversion = htmlChar("S"); *@
        //var conversion = htmlChar("⟶");
        var conversion = htmlChar("a …	​﻿⟶b");
        Console.WriteLine($"Conversion: {conversion}");
        output = conversion;
    }

    private void Encode()
    {
        var writer = new StringWriter();
        output = "abc"; // writer.ToString();
    }

    private void Decode()
    {
        s = "";
    }

    private string htmlChar(string c)
    {
        var desc = "";
        var hex = "";
        //var theSize = System.Runtime.InteropServices.Marshal.SizeOf(c);

        Console.WriteLine($"Length: {c.Length}");
        //Console.WriteLine($"Size: {theSize}");

        if (c.Length == 1)
        {
            var c1 = char.Parse(c);
            desc = Convert.ToByte(c1) + "<br>\r\n" + String.Format("0x{0,2:X2}", (Convert.ToByte(c1)));
            hex = String.Format("{0,2:X2}", (Convert.ToByte(c1)));
        }
        else 
        {
            //@* $n = unpack('V', iconv('UTF-8', 'UCS-4LE', $c))[1]; *@
            // unassigned long

            var bytes = Encoding.UTF8.GetBytes(c);
            //var bytes = BitConverter.GetBytes(c);
            var isLittleEndian = BitConverter.IsLittleEndian;
            if (isLittleEndian) {
                Array.Reverse(bytes);
            }
            desc = $"&amp;#{bytes.Select(x => (int)x).Sum()};<br>";
            hex = "\\u" + BitConverter.ToString(bytes).Replace("-", String.Empty); // \u00A0
        }

        Console.WriteLine($"CHAR: {c}");
        Console.WriteLine($"DESC: {desc}");
        Console.WriteLine($"HEX: {hex}");

        var pattern = @"/^[\\p{L}\\p{M}\\p{N}\\p{P}\\p{S}]$/u";
        Regex rx = new Regex(pattern, RegexOptions.Compiled | RegexOptions.IgnoreCase);
        MatchCollection matches = rx.Matches(c);

        var symbol = "";
        if (c == "\r")
        {
            symbol = "<span class='symbol S2Tooltip anchor'>CR</span>";
        }
        else if (c == "\n")
        {
            symbol = "<span class='symbol S2Tooltip anchor'>LF</span>";
        }
        else if (c == "\t")
        {
            symbol = "<span class='symbol S2Tooltip anchor'>⟶</span>&#8203;";
        }
        else if (c == " ")
        {
            symbol = "<span class='white S2Tooltip anchor'>·</span>&#8203;";
        }
        else
        {
            if (matches.Count > 0)
            {
                symbol = "<span class='S2Tooltip anchor'>" + c + "</span>";
            }
            else
            {
                symbol = "<span class='hex S2Tooltip anchor'>" + hex + "</span>";
            }
        }

        return symbol + 
            "<span class='S2Tooltip container'>" + 
            "<span class='S2Tooltip tiptext rounded shadow'>" + desc + "</span>" +
            "</span>";
    }

    private void text2html(string s)
    {
        // UTF-8 global?
        var html = "<div class='output'>\r\n";
        
        var sl = s.Length;
        var nlc = 0;

        for (var i=0; i<sl; i++) 
        {
            @* $c = mb_substr($s, $i, 1); *@
            var c = s.Substring(i, 1); // .ToCharArray()[0];
            if (c == "\r") // Environment.NewLine
            {
                if (nlc == 0)
                {
                    nlc = 1;
	                html += htmlChar(c);
                }
            }
        }
    }
}
